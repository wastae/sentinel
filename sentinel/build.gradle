/*
 * Copyright Â© 2018 Frederik Mikkelsen <fred at frederikam.com>
 * FredBoat microservice for handling JDA and Lavalink over RabbitMQ.
 *
 * This program is licensed under GNU AGPLv3 under no warranty.
 */

group 'com.fredboat'
version '0.1'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: "kotlin-spring"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: 'org.springframework.boot'
apply plugin: 'net.ltgt.apt'

configurations {
    // Screws up the Spring Boot jar
    compile.exclude module: 'opus-java'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dependencies {
    compile project(":sentinel-shared")
    compile "net.dv8tion:JDA:$jdaVersion"
    compile "net.sf.trove4j:trove4j:3.0.3"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0"
    compile "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
    compile "org.glassfish.jaxb:jaxb-runtime:2.3.2"
    //compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    //compile "org.jetbrains.kotlin:kotlin-script-runtime:$kotlin_version"      // For kotlin eval
    //compile "org.jetbrains.kotlin:kotlin-script-util:$kotlin_version"       // For kotlin eval
    //compile "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version" // For kotlin eval
    compile ("org.springframework.boot:spring-boot-starter-websocket:$bootVersion") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
//    compile ("org.springframework.boot:spring-boot-starter-web:$bootVersion") {
//        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
//    }
    compile "org.springframework.boot:spring-boot-starter-undertow:$bootVersion"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$bootVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonKotlinVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "io.sentry:sentry-logback:$sentryVersion"
    compile "org.reflections:reflections:$reflectionsVersion"

    compile group: 'org.json', name: 'json', version: jsonVersion
    compile group: 'org.yaml', name: 'snakeyaml', version: snakeYamlVersion
    compile group: 'io.prometheus', name: 'simpleclient', version: prometheusClientVersion
    compile group: 'io.prometheus', name: 'simpleclient_hotspot', version: prometheusClientVersion
    compile group: 'io.prometheus', name: 'simpleclient_logback', version: prometheusClientVersion
    compile group: 'io.prometheus', name: 'simpleclient_guava', version: prometheusClientVersion
    compile group: 'io.prometheus', name: 'simpleclient_servlet', version: prometheusClientVersion

    //tests
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
    // To avoid compiler warnings about @API annotations in JUnit code.
    testCompileOnly group: 'org.apiguardian', name: 'apiguardian-api', version: apiGuardianVersion
    //required for the docker compose rule https://github.com/palantir/docker-compose-rule/issues/224
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-migrationsupport', version: junitVersion
    //allows us to fire up docker containers to test with, for example our postgres database
    //testCompile group: 'com.palantir.docker.compose', name: 'docker-compose-rule-junit4', version: dockerComposeRuleVersion
    //testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
}

bootRun {
    //compiling tests during bootRun increases the likelihood of catching broken tests locally instead of on the CI
    dependsOn compileTestJava

    //pass in custom jvm args
    // source: https://stackoverflow.com/a/25079415
    // example: ./gradlew bootRun -PjvmArgs="--illegal-access=debug -Dwhatever=value"
    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

bootJar {
    archiveName = "sentinel.jar"
    springBoot {
        // Required for kotlin eval
        requiresUnpack '**/kotlin-*.jar'
    }
    doLast {
        //copies the jar into a place where the Dockerfile can find it easily (and users maybe too)
        copy {
            from 'build/libs/sentinel.jar'
            into '.'
        }

        // For publishing
        copy {
            from 'build/libs/sentinel.jar'
            into 'build/libs'
            rename {"sentinel-${rootProject.version}.jar"}
        }
    }
}

// Makes sure JitPack packages the jar
install.dependsOn bootJar

//spring boot annotations processor
compileJava.dependsOn processResources

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
